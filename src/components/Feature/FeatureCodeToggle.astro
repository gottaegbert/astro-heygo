---
/**
 * * These are toggle-able code sections, to showcase code in different languages
 * Each code section is a tab, and the code is displayed in a window below
 *
 * This uses an Astro content collection for the data. Check out src/data/codeToggles for the data
 */
import { type CollectionEntry, getCollection, render } from "astro:content";
import { Icon } from "astro-icon/components";

// components
import Badge from "@components/Badge/Badge.astro";

// utils
import { slugify } from "@js/textUtils";

// get all code toggle sections
const codeToggles = await getCollection("codeToggles", ({ data }) => {
	// filter out drafts
	return data.draft !== true;
});

interface codeToggleData {
	language: string;
	order: number;
	icon?: string;
	code: any; // return from render() function. This is the code HTML
}

// for each element in codeToggles, render the code and return the data
const codeToggleData: codeToggleData[] = await Promise.all(
	codeToggles.map(async (codeToggle) => {
		const { language, order, icon } = codeToggle.data;
		const { Content } = await render(codeToggle);
		return { language, order, icon, code: Content };
	}),
);

// sort the elements by order
codeToggleData.sort((a, b) => a.order - b.order);
---

<section id="feature-code-toggle" class="overflow-clip py-16 md:py-20">
	<div class="mx-auto max-w-4xl px-6">
		<div class="mx-auto max-w-2xl text-center" data-aos="fade-left" id="code-toggle-trigger">
			<Badge>Code for everyone</Badge>
			<div>
				<h2 class="h2 inline">Simple integration</h2>
			</div>
			<p class="description mt-4 text-xl tracking-tight text-pretty">
				Showcase how you can use your tool in all sorts of different languages.
			</p>
		</div>
		<div
			class="code-toggle border-base-800 dark:bg-dark-bg mt-12 w-full overflow-clip rounded-2xl border bg-(--astro-code-background)"
			data-aos="fade-left"
			data-aos-trigger="#code-toggle-trigger"
			data-aos-delay=".3"
		>
			<div class="tabs border-base-800 flex justify-start gap-2 overflow-x-auto border-b p-4">
				{
					codeToggleData.map((codeToggle, idx) => (
						<button
							id={`code-toggle-${idx}`}
							class:list={[
								"code-toggle__tab border-base-800 text-base-200 hover:border-base-700 dark:bg-dark-bg dark:text-base-400 relative flex flex-nowrap items-center gap-1 rounded-md border bg-[var(--astro-code-background)] px-2 py-1 transition duration-300",
								"before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-blue-500 before:opacity-0 before:blur before:transition",
							]}
							data-tab={idx}
							aria-expanded="false"
							aria-haspopup="true"
							aria-controls={`code-content-${idx}`}
						>
							{codeToggle.icon && (
								<Icon name={codeToggle.icon} class="code-toggle__icon size-4" aria-hidden="true" />
							)}
							<span>{codeToggle.language}</span>
						</button>
					))
				}
			</div>
			<div class="code-window h-96 bg-(--astro-code-background)">
				<div class="relative z-10 h-full overflow-hidden">
					{
						codeToggleData.map((codeToggle, idx) => (
							<div
								id={`code-content-${idx}`}
								class:list={[
									"code-toggle__content absolute inset-x-0 z-10 h-full max-w-none p-4",
									"slide-in-from-bottom-1 fade-in-0 animate-in hidden transition-all duration-500 will-change-transform",
								]}
								data-tab={idx}
								aria-labelledby={`code-toggle-${idx}`}
							>
								{/* render the code HTML */}
								<codeToggle.code />
							</div>
						))
					}
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	function codeToggleSetup() {
		const tabs = document.querySelectorAll(".code-toggle__tab");
		const contents = document.querySelectorAll(".code-toggle__content") as NodeListOf<HTMLElement>;

		if (!tabs.length || !contents.length) return;

		tabs.forEach((tab) => {
			tab.addEventListener("click", () => {
				// if tab has class "active", return
				if (tab.classList.contains("active")) return;

				//@ts-ignore
				const newContent = contents[parseInt(tab.getAttribute("data-tab"))];

				// remove active class from currently active tab
				tabs.forEach((t) => {
					if (t.classList.contains("active")) {
						// turn off currently active tab
						t.classList.remove("active");
						t.setAttribute("aria-expanded", "false");

						// hide currently active content
						//@ts-ignore
						const oldContent = contents[parseInt(t.getAttribute("data-tab"))];
						// oldContent.classList.remove("code-toggle__content--fade-in");
						oldContent.classList.add("hidden");
					}
				});

				// add active class to clicked tab
				tab.classList.add("active");
				tab.setAttribute("aria-expanded", "true");

				// show new code content
				newContent.classList.remove("hidden");
				// newContent.classList.add("code-toggle__content--fade-in");
			});
		});

		// Set default active tab
		tabs[0].classList.add("active");
		tabs[0].setAttribute("aria-expanded", "true");
		contents[0].classList.remove("hidden");
		// contents[0].classList.add("code-toggle__content--fade-in");
	}

	// runs on initial page load
	codeToggleSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", codeToggleSetup);
</script>

<style>
	@import "tailwindcss/theme" theme(reference);
	@import "@/styles/tailwind-theme.css" theme(reference);

	.code-toggle__tab.active {
		@apply border-primary-300 text-base-100 before:opacity-100;
	}
</style>
