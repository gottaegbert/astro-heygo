---
/**
 * Carousel component for HeyGo homepage
 * 3 slides, each with image and text, smooth transitions
 */
import frame1 from "@images/frame1.png";
import frame2 from "@images/frame2.png";
import frame3 from "@images/frame3.png";

const slides = [
	{
		image: frame1.src,
		title: "HeyGo Sensor",
		subtitle: "Motion Intelligence <br> Captured in Full",
		description:
			"A multi-sensor system continuously tracks your posture and ride dynamics — delivering a full-spectrum, quantifiable view of every carve, lean, and line.",
	},
	{
		image: frame2.src,
		title: "HeyGo App",
		subtitle: "Data Intelligence <br/>Riding Technique Analysis",
		description:
			"AI analyzes your ride in real time, scoring every run with smart metrics. Your performance is benchmarked against global riders to pinpoint your skill level and progress.",
	},
	{
		image: frame3.src,
		title: "HeyGo Analysis",
		subtitle: "Spatial Intelligence<br/>Where Motion Meets Data",
		description:
			"See your riding—frame by frame, data point by data point. HeyGo fuses your ski footage with 3D motion data in real time, revealing how every movement maps to real metrics — and where things go wrong.",
	},
];
---

<div
	class="carousel-container z-0 flex h-screen w-full flex-col items-center bg-[#0a0a0a]"
	id="carousel"
>
	<div
		class="relative z-10 h-screen w-full bg-gradient-to-br from-[#0a0a0a] via-[#111111] to-[#0a0a0a]"
		style="min-height: 100vh;"
	>
		<!-- Background grid pattern -->
		<div class="absolute inset-0 opacity-10">
			<div
				class="absolute inset-0"
				style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0); background-size: 50px 50px;"
			>
			</div>
		</div>

		<!-- Slides Container -->
		<div class="slides-wrapper relative h-full w-full">
			{
				slides.map((slide, index) => (
					<div
						class={`slide absolute inset-0 h-full w-full transition-all duration-700 ease-in-out ${index === 0 ? "z-10 opacity-100" : "z-0 opacity-0"}`}
						data-slide={index}
					>
						{/* Slide 3: Full background image with overlay text */}
						{index === 2 ? (
							<div class="relative h-full w-full">
								{/* Full background image */}
								<div
									class="absolute inset-0 bg-cover bg-center bg-no-repeat"
									style={`background-image: url('${slide.image}')`}
								>
									{/* Dark overlay for better text readability */}
									<div class="absolute inset-0 bg-black/40" />
								</div>

								{/* Text content overlay */}
								<div class="relative z-10 flex h-full items-center justify-end pr-48">
									<div class="max-w-[600px] space-y-6 text-right">
										<div class="text-sm font-medium tracking-wider text-[#00e0ff] uppercase">
											{slide.title}
										</div>
										<h2
											class="text-4xl leading-tight font-bold text-white"
											set:html={slide.subtitle}
										/>
										<p class="text-lg leading-relaxed text-gray-200">{slide.description}</p>
									</div>
								</div>
							</div>
						) : (
							<div class="relative h-full w-full">
								{/* Slide 2: Text on left, Image on right */}
								{index === 1 ? (
									<>
										{/* Absolute positioned image on right */}
										<img
											src={slide.image}
											alt={slide.title}
											class="absolute right-48 bottom-8 z-0 max-h-[70%] max-w-[40%] object-contain"
											loading="lazy"
										/>

										{/* Left side - Text content */}
										<div class="relative z-10 flex h-full w-3/5 max-w-[500px] flex-col items-start justify-center space-y-6 lg:pl-[360px]">
											{/* Text content */}
											<div class="relative z-10">
												<div class="text-sm font-medium tracking-wider text-[#00e0ff] uppercase">
													{slide.title}
												</div>
												<h2
													class="text-4xl leading-tight font-bold text-white"
													set:html={slide.subtitle}
												/>
												<p class="max-w-lg text-lg leading-relaxed text-gray-300">
													{slide.description}
												</p>
											</div>
										</div>
									</>
								) : (
									/* Slide 1: Image on left, Text on right */
									<>
										{/* Absolute positioned image on left */}
										<img
											src={slide.image}
											alt={slide.title}
											class="absolute top-1/2 left-48 z-0 max-h-[75%] max-w-[75%] -translate-y-1/2 object-contain"
											loading="lazy"
										/>

										{/* Right side - Text content */}
										<div class="absolute top-1/2 right-48 z-10 flex w-[45%] max-w-[500px] -translate-y-1/2 flex-col items-start justify-center space-y-6">
											{/* Grid animated background squares */}
											<div class="absolute inset-0 z-0 overflow-hidden opacity-30">
												<div class="grid-squares">
													{Array.from({ length: 30 }, (_, i) => {
														const row = Math.floor(i / 5);
														const col = i % 8;
														const randomDelay = Math.random() * 4;
														return (
															<div
																class="grid-square"
																style={`
																	--delay: ${randomDelay}s; 
																	--row: ${row};
																	--col: ${col};
																`}
															/>
														);
													})}
												</div>
											</div>

											{/* Text content with higher z-index */}
											<div class="relative z-10">
												<div class="mb-4 text-sm font-medium tracking-wider text-[#00e0ff] uppercase">
													{slide.title}
												</div>
												<h2
													class="mb-6 text-4xl leading-tight font-bold text-white"
													set:html={slide.subtitle}
												/>
												<p class="text-lg leading-relaxed text-gray-300">{slide.description}</p>
											</div>
										</div>
									</>
								)}
							</div>
						)}
					</div>
				))
			}
		</div>

		<!-- Dots indicator -->
		<div
			class="dots-container absolute bottom-8 left-1/2 z-30 flex -translate-x-1/2 transform gap-3"
		>
			{
				slides.map((_, index) => (
					<button
						class={`dot h-2 w-8 rounded-full transition-all duration-300 ${index === 0 ? "bg-[#00e0ff]" : "bg-white/30 hover:bg-white/50"}`}
						aria-label={`Go to slide ${index + 1}`}
						data-slide={index}
						type="button"
					/>
				))
			}
		</div>
	</div>
</div>

<script>
	let currentSlide = 0;
	const totalSlides = 3;
	let autoplayInterval = null;
	let isTransitioning = false;

	function updateSlide(newIndex) {
		if (isTransitioning || newIndex === currentSlide) return;

		isTransitioning = true;

		const slides = document.querySelectorAll(".slide");
		const dots = document.querySelectorAll(".dot");

		// Hide current slide
		slides[currentSlide].classList.remove("opacity-100", "z-10");
		slides[currentSlide].classList.add("opacity-0", "z-0");

		// Show new slide
		slides[newIndex].classList.remove("opacity-0", "z-0");
		slides[newIndex].classList.add("opacity-100", "z-10");

		// Update dots
		dots.forEach((dot, i) => {
			if (i === newIndex) {
				dot.classList.remove("bg-white/30");
				dot.classList.add("bg-[#00e0ff]");
			} else {
				dot.classList.remove("bg-[#00e0ff]");
				dot.classList.add("bg-white/30");
			}
		});

		currentSlide = newIndex;

		setTimeout(() => {
			isTransitioning = false;
		}, 700);
	}

	function nextSlide() {
		const nextIndex = (currentSlide + 1) % totalSlides;
		updateSlide(nextIndex);
	}

	function prevSlide() {
		const prevIndex = (currentSlide - 1 + totalSlides) % totalSlides;
		updateSlide(prevIndex);
	}

	function startAutoplay() {
		stopAutoplay();
		autoplayInterval = setInterval(nextSlide, 10000);
	}

	function stopAutoplay() {
		if (autoplayInterval) {
			clearInterval(autoplayInterval);
			autoplayInterval = null;
		}
	}

	// Initialize when DOM is ready
	function initCarousel() {
		// Dots navigation
		document.querySelectorAll(".dot").forEach((dot, index) => {
			dot.addEventListener("click", () => updateSlide(index));
		});

		// Pause autoplay on hover
		const carousel = document.getElementById("carousel");
		if (carousel) {
			carousel.addEventListener("mouseenter", stopAutoplay);
			carousel.addEventListener("mouseleave", startAutoplay);
		}

		// Start autoplay
		// startAutoplay(); // Todo:
	}

	// Initialize
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", initCarousel);
	} else {
		initCarousel();
	}
</script>

<style>
	/* Smooth transitions */
	.slide {
		transition: opacity 0.7s ease-in-out;
	}

	/* Hide scrollbars */
	.overflow-hidden {
		scrollbar-width: none;
		-ms-overflow-style: none;
	}

	.overflow-hidden::-webkit-scrollbar {
		display: none;
	}

	/* Animated squares background */
	.animated-squares {
		position: relative;
		width: 100%;
		height: 100%;
	}

	.square {
		position: absolute;
		width: 20px;
		height: 20px;
		background: linear-gradient(135deg, #666666, #888888);
		border-radius: 3px;
		opacity: 0;
		transform: scale(0.5);
		left: var(--x);
		top: var(--y);
		animation: squareGlow 15s ease-in-out infinite;
		animation-delay: var(--delay);
		box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
	}

	@keyframes squareGlow {
		0% {
			opacity: 0;
			transform: scale(0.5);
			box-shadow: 0 0 5px rgba(255, 255, 255, 0.05);
		}
		10% {
			opacity: 0.6;
			transform: scale(1);
			box-shadow: 0 0 15px rgba(255, 255, 255, 0.2);
		}
		20% {
			opacity: 0.8;
			transform: scale(1.1);
			box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
		}
		30% {
			opacity: 0.7;
			transform: scale(1);
			box-shadow: 0 0 12px rgba(255, 255, 255, 0.15);
		}
		90% {
			opacity: 0.2;
			transform: scale(0.8);
			box-shadow: 0 0 8px rgba(255, 255, 255, 0.1);
		}
		100% {
			opacity: 0;
			transform: scale(0.5);
			box-shadow: 0 0 5px rgba(255, 255, 255, 0.05);
		}
	}

	/* Add some variety to the squares */
	.square:nth-child(2n) {
		background: linear-gradient(135deg, #777777, #999999);
		border-radius: 50%;
		width: 15px;
		height: 15px;
	}

	.square:nth-child(3n) {
		background: linear-gradient(135deg, #555555, #777777);
		width: 25px;
		height: 25px;
		border-radius: 2px;
	}

	.square:nth-child(4n) {
		background: linear-gradient(135deg, #888888, #aaaaaa);
		width: 18px;
		height: 18px;
		border-radius: 4px;
	}

	.dot:hover {
		transform: scale(1.2);
	}

	/* Grid squares animation */
	.grid-squares {
		position: relative;
		width: 100%;
		height: 100%;
		display: grid;
		grid-template-columns: repeat(10, 1fr);
		grid-template-rows: repeat(4, 1fr);
		gap: 30px;
		padding: 0px;
	}

	.grid-square {
		width: 100%;
		height: 100%;
		min-height: 50px;
		aspect-ratio: 1;
		background: #444444;
		border-radius: 4px;
		opacity: 0.3;
		animation: gridPulse 8s ease-in-out infinite;
		animation-delay: var(--delay);
		transition: all 0.3s ease;
	}

	.grid-square:nth-child(2n) {
		background: #555555;
		border-radius: 3px;
	}

	.grid-square:nth-child(3n) {
		background: #666666;
		border-radius: 1px;
	}

	.grid-square:nth-child(4n) {
		background: #777777;
		border-radius: 4px;
	}

	.grid-square:nth-child(5n) {
		background: #888888;
	}

	@keyframes gridPulse {
		0% {
			opacity: 0.2;
			transform: scale(0.8);
			background: #444444;
		}
		15% {
			opacity: 0.6;
			transform: scale(1);
			background: #666666;
		}
		30% {
			opacity: 0.9;
			transform: scale(1.1);
			background: #888888;
			box-shadow: 0 0 8px rgba(255, 255, 255, 0.1);
		}
		45% {
			opacity: 1;
			transform: scale(1);
			background: #aaaaaa;
			box-shadow: 0 0 12px rgba(255, 255, 255, 0.2);
		}
		60% {
			opacity: 0.8;
			transform: scale(0.95);
			background: #888888;
			box-shadow: 0 0 6px rgba(255, 255, 255, 0.1);
		}
		80% {
			opacity: 0.4;
			transform: scale(0.9);
			background: #666666;
		}
		100% {
			opacity: 0.2;
			transform: scale(0.8);
			background: #444444;
		}
	}
</style>
