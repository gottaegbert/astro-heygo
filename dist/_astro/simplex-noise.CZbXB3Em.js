const Q=Math.sqrt(3),X=.5*(Q-1),b=(3-Q)/6,N=t=>0|Math.floor(t),P=new Float64Array([1,1,-1,1,1,-1,-1,-1,1,0,-1,0,1,0,-1,0,0,1,0,-1,0,1,0,-1]);function k(t=Math.random){const n=Y(t),o=new Float64Array(n).map((t=>P[t%12*2])),r=new Float64Array(n).map((t=>P[t%12*2+1]));return function(t,e){let a=0,c=0,l=0;const s=(t+e)*X,f=N(t+s),i=N(e+s),u=(f+i)*b,w=t-(f-u),y=e-(i-u);let A,h;w>y?(A=1,h=0):(A=0,h=1);const m=w-A+b,p=y-h+b,F=w-1+2*b,M=y-1+2*b,P=255&f,Q=255&i;let k=.5-w*w-y*y;if(k>=0){const t=P+n[Q];k*=k,a=k*k*(o[t]*w+r[t]*y)}let Y=.5-m*m-p*p;if(Y>=0){const t=P+A+n[Q+h];Y*=Y,c=Y*Y*(o[t]*m+r[t]*p)}let d=.5-F*F-M*M;if(d>=0){const t=P+1+n[Q+1];d*=d,l=d*d*(o[t]*F+r[t]*M)}return 70*(a+c+l)}}function Y(t){const n=new Uint8Array(512);for(let t=0;t<256;t++)n[t]=t;for(let o=0;o<255;o++){const r=o+~~(t()*(256-o)),e=n[o];n[o]=n[r],n[r]=e}for(let t=256;t<512;t++)n[t]=n[t-256];return n}export{k as c};